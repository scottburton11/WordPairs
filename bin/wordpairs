#!/usr/bin/env ruby

# == Synopsis 
#   wordpairs outputs pairs of words which contain the same characters 
#   but reversed endings.
#
#   ex: agonies, agonise, analog, angola, animal, lamina
#
#   The default length for the ending segment is 2, but it can be altered
#   as a command-line option
#
# == Examples
#   Use the default dictionary
#
#     wordpairs
#
#   Other examples:
#   
#   Provide your own dictionary:
#
#     wordpairs -d my-dictionary.txt
#
#   Use an alternate trim length:
#     
#     wordpairs -l 3 -d french-words.txt
#
#
# == Usage 
#   wordpairs [options]
#
#   For help use: wordpairs -h
#
# == Options
#   -h, --help                                Displays help message
#   -v, --version                             Display the version, then exit
#   -q, --quiet                               Output as little as possible, overrides verbose
#   -V, --verbose                             Verbose output
#   -d, --dictionary /path/to/file.txt        Provide a plaintext dictionary
#   -l, --length     integer                  Provide an alternate trim length (default: 2)
#
#
# == Author
#   Scott Burton
#
# == Copyright
#   Copyright (c) 2009 Scott Burton. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php


require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'date'


class App
  VERSION = '0.1.0'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
      opts.on('-d path', '--dictionary path') {|path| @options.dictionary = path}
      opts.on('-l n', '--length n') {|n| @options.trim = n.to_i}
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
      @options.dictionary = File.read(@options.dictionary) if @options.dictionary
      @options.words = @options.dictionary.scan(/^[\w" "'-\.\^]+$/) if @options.dictionary
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true
    end
    
    # Setup the arguments
    def process_arguments
      @words = @options.words || WordPairs::Words
      @dictionary = @options.dictionary || WordPairs::Dictionary
      @trim = @options.trim || 2
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      
      WordPairs.run(@words, @dictionary, @trim)
      
    end


end

require File.dirname(__FILE__) + "/../lib/word_pairs.rb"

# Create and run the application
app = App.new(ARGV, STDIN)
app.run
